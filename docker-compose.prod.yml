networks:
  4proj_prod:
    driver: bridge

services:
  traefik:
    image: traefik:v3.1
    restart: unless-stopped
    ports:
      - "${HOST_PORT_TRAEFIK}:80"
      - "${HOST_PORT_TRAEFIK_DASHBOARD}:8080"
    command:
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--ping=true"
      - "--ping.entrypoint=http"
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${DASHBOARD_USER}:${DASHBOARD_PASSWORD_HASH}"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    networks:
      - 4proj_prod

  incident-db:
    image: "mysql:8.0"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${INCIDENT_DB_ROOT_PSW}
      MYSQL_DATABASE: ${INCIDENT_DB}
      MYSQL_USER: ${INCIDENT_DB_USER}
      MYSQL_PASSWORD: ${INCIDENT_DB_PSW}
    volumes:
      - 4proj-incident-database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${INCIDENT_DB_USER}", "-p${INCIDENT_DB_PSW}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - 4proj_prod

  # user-db:
  #   image: "mysql:8.0"
  #   restart: unless-stopped
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${USER_DB_ROOT_PSW}
  #     MYSQL_DATABASE: ${USER_DB}
  #     MYSQL_USER: ${USER_DB_USER}
  #     MYSQL_PASSWORD: ${USER_DB_PSW}
  #   volumes:
  #     - 4proj-user-database:/var/lib/mysql
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${USER_DB_USER}", "-p${USER_DB_PSW}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   networks:
  #     - 4proj_prod

  # navigation-db:
  #   image: "mysql:8.0"
  #   restart: unless-stopped
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${NAV_DB_ROOT_PSW}
  #     MYSQL_DATABASE: ${NAV_DB}
  #     MYSQL_USER: ${NAV_DB_USER}
  #     MYSQL_PASSWORD: ${NAV_DB_PSW}
  #   volumes:
  #     - 4proj-nav-database:/var/lib/mysql
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${NAV_DB_USER}", "-p${NAV_DB_PSW}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   networks:
  #     - 4proj_prod

  # navigation-service:
  #   build:
  #     context: ./navigation-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     navigation-db:
  #       condition: service_healthy
  #   environment:
  #     TOMTOM_URL: ${TOMTOM_URL}
  #     TOMTOM_APIKEY: ${TOMTOM_APIKEY}
  #     GEOAPIFY_URL: ${GEOAPIFY_URL}
  #     GEOAPIFY_APIKEY: ${GEOAPIFY_APIKEY}
  #     NAV_DB: ${NAV_DB}
  #     NAV_DB_USER: ${NAV_DB_USER}
  #     NAV_DB_PSW: ${NAV_DB_PSW}
  #     ASPNETCORE_ENVIRONMENT: Production
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.navigation-service.loadbalancer.server.port=8080"
  #     # API
  #     - "traefik.http.routers.navigation-api.rule=PathPrefix(`/api/navigation`)"
  #     - "traefik.http.routers.navigation-api.entrypoints=http"
  #     - "traefik.http.middlewares.strip-navigation-prefix.stripprefix.prefixes=/api/navigation"
  #     - "traefik.http.routers.navigation-api.middlewares=strip-navigation-prefix"
  #     # Swagger
  #     - "traefik.http.routers.navigation-swagger.rule=Host(`navigation.localhost`)"
  #     - "traefik.http.routers.navigation-swagger.entrypoints=http"
  #   networks:
  #     - 4proj_prod

  incident-service:
    build:
      context: ./incident-service
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      incident-db:
        condition: service_healthy
    environment:
      INCIDENT_DB: ${INCIDENT_DB}
      INCIDENT_DB_USER: ${INCIDENT_DB_USER}
      INCIDENT_DB_PSW: ${INCIDENT_DB_PSW}
      ASPNETCORE_ENVIRONMENT: Production
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=4proj_4proj_prod"
      - "traefik.http.services.incident-service.loadbalancer.server.port=8080"
      # API
      - "traefik.http.routers.incident-api.rule=PathPrefix(`/api/incident`)"
      - "traefik.http.routers.incident-api.entrypoints=http"
      - "traefik.http.middlewares.strip-incident-prefix.stripprefix.prefixes=/api/incident"
      - "traefik.http.routers.incident-api.middlewares=strip-incident-prefix"
      # Swagger
      - "traefik.http.routers.incident-swagger.rule=Host(`incident.localhost`)"
      - "traefik.http.routers.incident-swagger.entrypoints=http"
    networks:
      - 4proj_prod

  # user-service:
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     user-db:
  #       condition: service_healthy
  #   environment:
  #     USER_DB: ${USER_DB}
  #     USER_DB_USER: ${USER_DB_USER}
  #     USER_DB_PSW: ${USER_DB_PSW}
  #     ASPNETCORE_ENVIRONMENT: Production
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.user-service.loadbalancer.server.port=8080"
  #     # API
  #     - "traefik.http.routers.user-api.rule=PathPrefix(`/api/user`)"
  #     - "traefik.http.routers.user-api.entrypoints=http"
  #     - "traefik.http.middlewares.strip-user-prefix.stripprefix.prefixes=/api/user"
  #     - "traefik.http.routers.user-api.middlewares=strip-user-prefix"
  #     # Swagger
  #     - "traefik.http.routers.user-service.rule=Host(`user.localhost`)"
  #     - "traefik.http.routers.user-service.entrypoints=http"
  #   networks:
  #     - 4proj_prod

  # auth-service:
  #   build:
  #     context: ./auth-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     user-service:
  #       condition: service_healthy
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: Production
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.auth-service.loadbalancer.server.port=8080"
  #       # API
  #     - "traefik.http.routers.auth-api.rule=PathPrefix(`/api/auth`)"
  #     - "traefik.http.routers.auth-api.entrypoints=http"
  #     - "traefik.http.middlewares.strip-auth-prefix.stripprefix.prefixes=/api/auth"
  #     - "traefik.http.routers.auth-api.middlewares=strip-auth-prefix"
  #     # Swagger
  #     - "traefik.http.routers.auth-service.rule=Host(`auth.localhost`)"
  #     - "traefik.http.routers.auth-service.entrypoints=http"
  #   networks:
  #     - 4proj_prod

  # alert-service:
  #   build:
  #     context: ./alert-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     user-service:
  #       condition: service_healthy
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: Production
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.alert-service.loadbalancer.server.port=8080"
  #       # API
  #     - "traefik.http.routers.alert-api.rule=PathPrefix(`/api/alert`)"
  #     - "traefik.http.routers.alert-api.entrypoints=http"
  #     - "traefik.http.middlewares.strip-alert-prefix.stripprefix.prefixes=/api/alert"
  #     - "traefik.http.routers.alert-api.middlewares=strip-alert-prefix"
  #     # Swagger
  #     - "traefik.http.routers.alert-service.rule=Host(`alert.localhost`)"
  #     - "traefik.http.routers.alert-service.entrypoints=http"
  #   networks:
  #     - 4proj_prod

  # statistics-service:
  #   build:
  #     context: ./statistic-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   depends_on:
  #     user-db:
  #       condition: service_healthy
  #     incident-db:
  #       condition: service_healthy
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: Production
  #     USER_DB: ${USER_DB}
  #     USER_DB_USER: ${USER_DB_USER}
  #     USER_DB_PSW: ${USER_DB_PSW}
  #     INCIDENT_DB: ${INCIDENT_DB}
  #     INCIDENT_DB_USER: ${INCIDENT_DB_USER}
  #     INCIDENT_DB_PSW: ${INCIDENT_DB_PSW}
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.statistics-service.loadbalancer.server.port=8080"
  #       # API
  #     - "traefik.http.routers.statistics-api.rule=PathPrefix(`/api/statistics`)"
  #     - "traefik.http.routers.statistics-api.entrypoints=http"
  #     - "traefik.http.middlewares.strip-statistics-prefix.stripprefix.prefixes=/api/statistics"
  #     - "traefik.http.routers.statistics-api.middlewares=strip-statistics-prefix"
  #     # Swagger
  #     - "traefik.http.routers.statistics-service.rule=Host(`statistics.localhost`)"
  #     - "traefik.http.routers.statistics-service.entrypoints=http"
  #   networks:
  #     - 4proj_prod

  # mobile-app-service:
  #   build:
  #     context: ./mobile-app-service
  #     dockerfile: Dockerfile
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   environment:
  #     - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
  #     - NODE_ENV=production
  #     - EXPO_PUBLIC_API_BASE_URL=${EXPO_PUBLIC_API_BASE_URL}
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:19000 || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 20s
  #   ports:
  #     - "8081:8081" # Metro bundler HTTP
  #     - "19000:19000" # Expo
  #     - "19001:19001" # Expo DevTools
  #   networks:
  #     - 4proj_prod

  # website-service:
  #   build:
  #     context: ./website-service
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=production
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=4proj_4proj_prod"
  #     - "traefik.http.services.website-service.loadbalancer.server.port=3000"
  #     - "traefik.http.routers.website.rule=Host(`localhost`) && !PathPrefix(`/api`)"
  #     - "traefik.http.routers.website.entrypoints=http"
  #     - "traefik.http.routers.website.priority=10"
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s
  #   networks:
  #     - 4proj_prod

volumes:
  4proj-incident-database:
  # 4proj-user-database:
  # 4proj-nav-database:
